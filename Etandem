#!/usr/bin/env python
# -*- coding: utf-8 -*-

#V05a

import os
import re
from itertools import permutations


##print 'Incate the primer number'
##primers=raw_input('form more than one separate by a comma : ')
dirRacine='/Users/annickcros/data/Etandem/'
dirIn='/Users/annickcros/data/Etandem/results_012016/'
dirOut='/Users/annickcros/data/Etandem/synthese_012016/'
dirOutRejets='/Users/annickcros/data/Etandem/rejets_012016/'
fichierIn='results.txt'

primers=[str(x) for x in range(1,19)]

dataMicroSat=[[],['TTTC',5],['TCT',13],['AAC',7],['TTA',21],['GAT',9],['TGA',7],['TG',12],['ATG',10],['TAA',9],['CA',10],['GATA',8],['ATT',12],['AAT',9],['GATA',6],['AT',9],['AATC',7],['ATCT',7],['TAA',8]]
##primers=primers.split(',')
nbprimers=len(primers)

try:
  os.chdir(dirOut)
except:
  os.mkdir(dirOut)

try:
  os.chdir(dirOutRejets)
except:
  os.mkdir(dirOutRejets)
  

reidpral=re.compile('(S[0-9]*_C[0-9]*)_([0-9]*)_([ab])')

print '\ntraitement en cours ....'

#lecture fichier result pour recuperer nom,threhold,satellite,motiftrouve  
alleles={}
individu={}
locus={}

#teste si motifattendu est une permutation de motif de meme longueur
def est_permutation(motifattendu,motif):
  lma=len(motifattendu)
  lm=len(motif)
  if lma==lm:
    return motifattendu in [''.join(p) for p in permutations(motif)]
  elif lm%lma==0:
    n=lm/lma
    motiftest=motifattendu[:lm]*n
    return motiftest in [''.join(p) for p in permutations(motif)]
  else:
    return False
  
#li = [Threshold,SeqName,Start,End,Score,Strand,Size,Count,Identity,Consensus,Sequence]
dictprimers={}
#primers=[str(p) for p in primers]
dictrejets={}


with open(dirIn+fichierIn,'r') as f:
  f.next()  
  for line in f:
    li=line.split('\t')
    thr=li[0]
    score=li[4]
    nom=li[1]
    seq=li[10].strip()
    motif=li[9]
    sat=seq[int(li[2])-1:int(li[3])]
    flankreg=seq.replace(sat,'')
    primer=nom.split('_')[2]
    motifattendu=dataMicroSat[int(primer)][0]
    #if primer in primers:      
    if  est_permutation(motifattendu,motif.upper()):
      if dictprimers.has_key(primer):
        dictprimers[primer].append([nom,thr,score,motifattendu,motif,str(len(flankreg)),flankreg,sat])
      else:
        dictprimers[primer]=[[nom,thr,score,motifattendu,motif,str(len(flankreg)),flankreg,sat]]
    else:
      if dictrejets.has_key(primer):
        dictrejets[primer].append([nom,thr,score,motifattendu,motif,str(len(flankreg)),flankreg,sat])
      else:
        dictrejets[primer]=[[nom,thr,score,motifattendu,motif,str(len(flankreg)),flankreg,sat]]

primers=dictprimers.keys()
prejets=dictrejets.keys()
for primer in primers:
  with open(dirOut+'primer_'+primer+'.txt','w') as f:
     f.write(('{}\t'*7+'{}\n').format('nom','thr','score','motifprimer','motif','longflank','flankreg','sat'))
     for data in dictprimers[primer]:
        f.write('\t'.join(data)+'\n')

cpt=0
for p in prejets:
  with open(dirOutRejets+'rejets_primer_'+p+'.txt','w') as r:
    r.write(('{}\t'*7+'{}\n').format('nom','thr','score','motifprimer','motif','longflank','flankreg','sat'))
    for data in dictrejets[p]:
      r.write('\t'.join(data)+'\n')
      cpt+=1
  
print '\nnombre de rejets: ',cpt 
  
print '\ntraitement des primers '+ ','.join(primers) +' termine'
print 'les fichiers de synthese sont dans '+dirOut
print '\nrejets dans '+dirOutRejets
    
  

        


            

          
          

          
  
  


          
 
        
  
